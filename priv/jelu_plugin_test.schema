
{mapping, "log.dir", "lager.log_dir", [
  {default, "log"},
  {datatype, string}
]}.

{mapping, "log.console", "lager.handlers", [
  {default, file},
  {datatype, {enum, [off, file, console, both]}}
]}.

{mapping, "log.console.level", "lager.handlers", [
  {default, info},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency, none]}}
]}.

{mapping, "log.console.file", "lager.handlers", [
  {default, "log/console.log"},
  {datatype, file}
]}.

{mapping, "log.console.size", "lager.handlers", [
  {default, 10485760},
  {datatype, integer}
]}.

{mapping, "log.console.count", "lager.handlers", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "log.info.file", "lager.handlers", [
  {datatype, file}
]}.

{mapping, "log.info.size", "lager.handlers", [
  {default, 10485760},
  {datatype, integer}
]}.

{mapping, "log.info.count", "lager.handlers", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "log.error.file", "lager.handlers", [
  {default, "log/error.log"},
  {datatype, file}
]}.

{mapping, "log.error.size", "lager.handlers", [
  {default, 10485760},
  {datatype, integer}
]}.

{mapping, "log.error.count", "lager.handlers", [
  {default, 5},
  {datatype, integer}
]}.

{mapping, "log.syslog", "lager.handlers", [
  {default,  off},
  {datatype, flag}
]}.

{mapping, "log.syslog.identity", "lager.handlers", [
  {default, "emqx"},
  {datatype, string}
]}.

{mapping, "log.syslog.facility", "lager.handlers", [
  {default, local0},
  {datatype, {enum, [daemon, local0, local1, local2, local3, local4, local5, local6, local7]}}
]}.

{mapping, "log.syslog.level", "lager.handlers", [
  {default, error},
  {datatype, {enum, [debug, info, notice, warning, error, critical, alert, emergency]}}
]}.

{mapping, "log.error.redirect", "lager.error_logger_redirect", [
  {default, on},
  {datatype, flag},
  hidden
]}.

{mapping, "log.error.messages_per_second", "lager.error_logger_hwm", [
  {default, 1000},
  {datatype, integer},
  hidden
]}.

{translation,
 "lager.handlers",
 fun(Conf) ->
    ErrorHandler = case cuttlefish:conf_get("log.error.file", Conf, undefined) of
      undefined -> [];
      ErrorFilename -> [{lager_file_backend, [{file, ErrorFilename},
                                              {level, error},
                                              {size, cuttlefish:conf_get("log.error.size", Conf)},
                                              {date, "$D0"},
                                              {count, cuttlefish:conf_get("log.error.count", Conf)}]}]
    end,

    InfoHandler = case cuttlefish:conf_get("log.info.file", Conf, undefined) of
      undefined -> [];
      InfoFilename -> [{lager_file_backend, [{file, InfoFilename},
                                             {level, info},
                                             {size, cuttlefish:conf_get("log.info.size", Conf)},
                                             {date, "$D0"},
                                             {count, cuttlefish:conf_get("log.info.count", Conf)}]}]
    end,

    ConsoleLogLevel = cuttlefish:conf_get("log.console.level", Conf),
    ConsoleLogFile = cuttlefish:conf_get("log.console.file", Conf),

    ConsoleHandler = {lager_console_backend, [{level, ConsoleLogLevel}]},
    ConsoleFileHandler = {lager_file_backend, [{file, ConsoleLogFile},
                                               {level, ConsoleLogLevel},
                                               {size, cuttlefish:conf_get("log.console.size", Conf)},
                                               {date, "$D0"},
                                               {count, cuttlefish:conf_get("log.console.count", Conf)}]},

    ConsoleHandlers = case cuttlefish:conf_get("log.console", Conf) of
      off -> [];
      file -> [ConsoleFileHandler];
      console -> [ConsoleHandler];
      both -> [ConsoleHandler, ConsoleFileHandler];
      _ -> []
    end,
    SyslogHandler = case cuttlefish:conf_get("log.syslog", Conf) of
      false -> [];
      true  -> [{lager_syslog_backend,
                  [cuttlefish:conf_get("log.syslog.identity", Conf),
                   cuttlefish:conf_get("log.syslog.facility", Conf),
                   cuttlefish:conf_get("log.syslog.level", Conf)]}]
    end,
    ConsoleHandlers ++ ErrorHandler ++ InfoHandler ++ SyslogHandler
  end
}.

{mapping, "log.crash", "lager.crash_log", [
  {default, on},
  {datatype, flag}
]}.

{mapping, "log.crash.file", "lager.crash_log", [
  {default, "log/crash.log"},
  {datatype, file}
]}.

{translation,
 "lager.crash_log",
 fun(Conf) ->
     case cuttlefish:conf_get("log.crash", Conf) of
         false -> undefined;
         _ ->
             cuttlefish:conf_get("log.crash.file", Conf, "./log/crash.log")
     end
 end}.

{mapping, "sasl", "sasl.sasl_error_logger", [
  {default, off},
  {datatype, flag},
  hidden
]}.